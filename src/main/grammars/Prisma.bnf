{
    parserClass = "io.techtrails.intellij.prisma.PrismaParser"
    parserUtilClass="io.techtrails.intellij.prisma.PrismaParserUtil"
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "Prisma"
    psiImplClassSuffix = "Impl"
    psiPackage = "io.techtrails.intellij.prisma.psi"
    psiImplPackage = "io.techtrails.intellij.prisma.psi.impl"

    elementTypeHolderClass = "io.techtrails.intellij.prisma.psi.PrismaTypes"
    elementTypeClass = "io.techtrails.intellij.prisma.psi.PrismaElementType"
    tokenTypeClass = "io.techtrails.intellij.prisma.psi.PrismaTokenType"

    psiImplUtilClass = "io.techtrails.intellij.prisma.psi.impl.PrismaPsiImplUtil"

    extends('.*-block') = block
    extends('type-alias') = block

    tokens = [
        EOL = "regexp:\r|\n|\r\n"
        WHITE_SPACE = "regexp:[\t ]+"

        STRING = "regexp:\"[\w/._%@:?=-]*\""
        BOOLEAN = 'regexp:(true|false)'
        NUMBER = 'regexp:((0[xX][0-9a-fA-F]*)|(\\+|-)?\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))([eE](\\+|-)?[0-9]+)?)([LlFfUuDdg]|UL|ul)?\\b'

        L_CURLY = '{'
        R_CURLY = '}'
        L_BRACKET = '['
        R_BRACKET = ']'
        L_PAREN = '('
        R_PAREN = ')'
        COMMA = ','
        EQ = '='
        QUESTION_MARK = '?'
        COLON = ':'

        TRIPLE_COMMENT = 'regexp:///.*'
        DOUBLE_COMMENT = 'regexp://.*'

        KEYWORD_DATASOURCE = 'datasource'
        KEYWORD_GENERATOR = 'generator'
        KEYWORD_MODEL = 'model'
        KEYWORD_TYPE = 'type'
        KEYWORD_ENUM = 'enum'

        MODEL_BLOCK_ATTRIBUTE_NAME = 'regexp:@@[a-zA-Z]+'
        MODEL_FIELD_ATTRIBUTE_NAME = 'regexp:@[a-zA-Z]+'

        ENTITY_NAME
        FUNCTION_NAME
    ]
}

prisma-schema ::= root-item *
private root-item ::= !<<eof>> block | comment | EOL

private comment ::= (TRIPLE_COMMENT | DOUBLE_COMMENT)

field-value ::= scalar-value | array | env-var-value
private scalar-value ::= NUMBER | BOOLEAN | STRING
private array ::= '[' (field-value (',' field-value)*)? ']' { pin(".*")=1 }
private env-var-value ::= 'env' '(' STRING ')'

field-name ::= ENTITY_NAME
block-name ::= ENTITY_NAME
type-name  ::= ENTITY_NAME
identifier ::= ENTITY_NAME

block           ::= config-block | model-block | type-alias | enum-block
config-block    ::= ('datasource' | 'generator') block-name '{' EOL? ((config-block-statement comment? EOL)  | comment | EOL)* '}' { pin=1 }
model-block     ::= 'model' type-name '{' EOL? ((model-block-statement comment? EOL) | comment | EOL)* '}' { pin=1 }
type-alias      ::= 'type'  type-name '=' model-field-type-and-attrs comment? EOL { pin=1 }
enum-block      ::= 'enum'  type-name '{' EOL? ((enum-block-statement comment? EOL)  | comment | EOL)* '}' { pin=1 }

config-block-statement ::= (field-name '=' field-value) { pin(".*")=1 }

model-block-statement ::= model-field-definition | model-attribute
private model-field-definition ::= field-name model-field-type-and-attrs { pin=1 }
private model-field-type-and-attrs ::= field-type (field-attribute (EOL? field-attribute)*)?
field-type ::= type-name type-modifier?
type-modifier ::= '?' | '[' + ']'

private field-attribute ::= MODEL_FIELD_ATTRIBUTE_NAME attribute-args?
private model-attribute ::= MODEL_BLOCK_ATTRIBUTE_NAME attribute-args?
private attribute-args ::= '(' attribute-arg-name? attribute-arg-value (',' attribute-arg-name attribute-arg-value)* ')' { pin(".*")=2 }
attribute-arg-name ::= ENTITY_NAME ':'
attribute-arg-value ::= attribute-arg-value-scalar | attribute-arg-value-array | model-function
private attribute-arg-value-scalar ::= STRING | NUMBER | BOOLEAN | identifier
private attribute-arg-value-array-item ::= attribute-arg-value-scalar | attribute-arg-value-array
private attribute-arg-value-array ::= '[' (attribute-arg-value-array-item (',' attribute-arg-value-array-item)*)? ']'
private model-function ::= FUNCTION_NAME '(' ')'

enum-constant ::= ENTITY_NAME
private enum-constant-definition ::= enum-constant field-attribute? { pin(".*")=1 }
enum-block-statement ::= enum-constant-definition | model-attribute
