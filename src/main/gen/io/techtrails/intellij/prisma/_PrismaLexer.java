/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.techtrails.intellij.prisma;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.techtrails.intellij.prisma.psi.PrismaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>PrismaLexer.flex</tt>
 */
public class _PrismaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BLOCK = 2;
  public static final int STRING_LITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\30\1\1\22\0\1\3\1\0\1\45\5\0\1\50\1\53\1\0\1\17\1\54\1\17"+
    "\1\21\1\27\1\14\11\20\1\57\2\0\1\55\1\0\1\56\1\31\3\16\1\24\1\22\1\24\5\32"+
    "\1\26\10\32\1\25\2\32\1\15\2\32\1\51\1\46\1\52\1\0\1\33\1\0\1\11\1\16\1\36"+
    "\1\34\1\7\1\10\1\23\4\32\1\12\1\40\1\37\1\35\1\42\1\32\1\5\1\13\1\4\1\6\2"+
    "\32\1\15\1\41\1\32\1\43\1\0\1\44\7\0\1\30\32\0\1\47\337\0\1\47\177\0\13\47"+
    "\35\0\2\30\5\0\1\47\57\0\1\47\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\4\4\1\5\1\1\1\5"+
    "\1\1\1\4\2\1\2\4\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\4\1\20"+
    "\1\21\3\22\1\23\1\22\3\0\3\4\1\24\2\4"+
    "\1\5\1\0\4\5\1\0\1\4\1\25\1\26\1\0"+
    "\2\4\3\22\4\4\1\5\1\0\1\4\1\25\1\27"+
    "\1\30\2\4\2\22\1\31\1\32\1\33\5\4\1\34"+
    "\6\4\1\35\1\4\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\360"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\360\0\360"+
    "\0\360\0\360\0\360\0\360\0\360\0\360\0\360\0\360"+
    "\0\u03f0\0\360\0\360\0\u0420\0\u0450\0\u0480\0\360\0\u04b0"+
    "\0\220\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\360\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\360\0\u0690\0\u06c0\0\u06f0\0\u02d0"+
    "\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870"+
    "\0\360\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0"+
    "\0\u09f0\0\u0a20\0\u07b0\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u01b0"+
    "\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u01b0\0\u0d20"+
    "\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\2\13\1\14\1\15"+
    "\3\13\1\16\2\13\1\17\1\20\1\21\1\13\1\22"+
    "\3\13\1\23\1\6\1\24\1\13\1\6\1\25\3\13"+
    "\1\26\2\13\1\27\1\6\1\30\2\6\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\6\1\7"+
    "\1\10\1\11\1\41\3\13\1\15\3\13\1\16\2\13"+
    "\1\17\1\20\1\21\5\13\1\23\1\6\1\24\1\13"+
    "\1\6\7\13\1\42\1\43\1\30\2\6\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\44\1\7"+
    "\1\10\1\44\10\45\1\44\2\45\3\44\5\45\1\46"+
    "\2\44\1\45\1\44\7\45\2\44\1\47\1\50\11\44"+
    "\4\0\10\51\1\0\2\51\3\0\5\51\3\0\1\51"+
    "\1\0\7\51\65\0\1\52\71\0\1\10\60\0\1\11"+
    "\55\0\3\53\1\13\1\54\6\13\1\55\2\13\1\0"+
    "\1\55\1\0\5\13\1\0\1\53\1\0\1\13\1\55"+
    "\5\13\1\56\1\13\4\0\1\53\1\57\10\0\3\53"+
    "\10\13\1\55\2\13\1\0\1\55\1\0\5\13\1\0"+
    "\1\53\1\0\1\13\1\55\7\13\4\0\1\53\1\57"+
    "\10\0\3\53\10\13\1\55\2\13\1\0\1\55\1\0"+
    "\5\13\1\0\1\53\1\0\1\13\1\55\3\13\1\60"+
    "\3\13\4\0\1\53\1\57\10\0\3\53\5\13\1\61"+
    "\2\13\1\55\2\13\1\0\1\55\1\0\5\13\1\0"+
    "\1\53\1\0\1\13\1\55\7\13\4\0\1\53\1\57"+
    "\15\0\1\62\1\63\1\64\1\0\1\64\1\0\1\20"+
    "\1\65\2\0\1\20\1\66\1\63\2\64\1\67\1\64"+
    "\5\0\1\64\37\0\1\20\3\0\1\20\1\70\44\0"+
    "\1\62\1\63\1\64\1\0\1\64\1\0\1\20\3\0"+
    "\1\20\1\66\1\63\2\64\1\67\1\64\5\0\1\64"+
    "\37\0\1\66\3\0\1\66\40\0\3\53\3\13\1\71"+
    "\4\13\1\55\2\13\1\0\1\55\1\0\5\13\1\0"+
    "\1\53\1\0\1\13\1\55\7\13\4\0\1\53\1\57"+
    "\36\0\1\72\34\0\10\73\1\0\2\73\2\0\6\73"+
    "\2\0\1\74\1\73\1\0\7\73\16\0\3\53\5\13"+
    "\1\75\2\13\1\55\2\13\1\0\1\55\1\0\5\13"+
    "\1\0\1\53\1\0\1\13\1\55\7\13\4\0\1\53"+
    "\1\57\10\0\3\53\10\13\1\55\2\13\1\0\1\55"+
    "\1\0\5\13\1\0\1\53\1\0\1\13\1\55\1\13"+
    "\1\76\5\13\4\0\1\53\1\57\10\0\3\53\1\13"+
    "\1\54\6\13\1\55\2\13\1\0\1\55\1\0\5\13"+
    "\1\0\1\53\1\0\1\13\1\55\7\13\4\0\1\53"+
    "\1\57\7\0\1\44\2\0\42\44\2\0\12\44\2\53"+
    "\1\77\10\45\1\44\2\45\3\44\5\45\1\44\1\77"+
    "\1\44\1\45\1\44\7\45\2\44\2\0\1\77\11\44"+
    "\2\0\24\44\1\100\15\44\2\0\11\44\4\0\2\101"+
    "\31\0\1\101\5\0\1\101\13\0\3\52\24\0\1\52"+
    "\16\0\1\52\11\0\3\53\24\0\1\53\16\0\1\53"+
    "\1\57\10\0\3\53\2\13\1\102\5\13\1\55\2\13"+
    "\1\0\1\55\1\0\5\13\1\0\1\53\1\0\1\13"+
    "\1\55\7\13\4\0\1\53\1\57\13\0\13\55\1\0"+
    "\1\55\1\0\5\55\3\0\11\55\16\0\3\53\10\13"+
    "\1\55\2\13\1\0\1\55\1\0\5\13\1\0\1\53"+
    "\1\0\1\13\1\55\6\13\1\103\4\0\1\53\1\57"+
    "\10\0\3\53\2\13\1\104\5\13\1\55\2\13\1\0"+
    "\1\55\1\0\5\13\1\0\1\53\1\0\1\13\1\55"+
    "\7\13\4\0\1\53\1\57\10\0\3\53\6\13\1\105"+
    "\1\13\1\55\2\13\1\0\1\55\1\0\5\13\1\0"+
    "\1\53\1\0\1\13\1\55\7\13\4\0\1\53\1\57"+
    "\21\0\1\64\61\0\1\106\2\0\1\107\1\106\45\0"+
    "\1\62\3\65\1\64\1\0\1\65\1\0\1\65\1\0"+
    "\1\65\1\0\1\65\1\64\1\65\1\67\1\64\5\0"+
    "\1\65\1\0\1\65\27\0\1\62\1\63\1\64\1\0"+
    "\1\64\1\0\1\66\3\0\1\66\1\0\1\63\2\64"+
    "\1\67\1\64\5\0\1\64\51\0\1\64\32\0\3\53"+
    "\10\13\1\55\2\13\1\0\1\55\1\0\5\13\1\0"+
    "\1\53\1\0\1\13\1\55\3\13\1\110\3\13\4\0"+
    "\1\53\1\57\7\0\1\111\2\0\24\111\1\112\1\0"+
    "\27\111\4\0\10\73\1\0\2\73\2\0\6\73\3\0"+
    "\1\73\1\0\7\73\21\0\10\113\1\0\2\113\3\0"+
    "\5\113\3\0\1\113\1\0\7\113\16\0\3\53\1\114"+
    "\7\13\1\55\2\13\1\0\1\55\1\0\5\13\1\0"+
    "\1\53\1\0\1\13\1\55\7\13\4\0\1\53\1\57"+
    "\10\0\3\53\10\13\1\55\2\13\1\0\1\55\1\0"+
    "\5\13\1\0\1\53\1\0\1\13\1\55\1\115\6\13"+
    "\4\0\1\53\1\57\7\0\1\44\2\53\1\77\24\44"+
    "\1\77\14\44\2\0\1\77\10\44\1\116\2\0\24\116"+
    "\1\117\1\44\14\116\2\111\11\116\1\0\3\53\3\13"+
    "\1\120\4\13\1\55\2\13\1\0\1\55\1\0\5\13"+
    "\1\0\1\53\1\0\1\13\1\55\7\13\4\0\1\53"+
    "\1\57\10\0\3\53\3\13\1\121\4\13\1\55\2\13"+
    "\1\0\1\55\1\0\5\13\1\0\1\53\1\0\1\13"+
    "\1\55\7\13\4\0\1\53\1\57\10\0\3\53\10\13"+
    "\1\55\2\13\1\0\1\55\1\0\5\13\1\0\1\53"+
    "\1\0\1\13\1\55\4\13\1\122\2\13\4\0\1\53"+
    "\1\57\10\0\3\53\7\13\1\102\1\55\2\13\1\0"+
    "\1\55\1\0\5\13\1\0\1\53\1\0\1\13\1\55"+
    "\7\13\4\0\1\53\1\57\15\0\1\62\1\0\1\64"+
    "\1\0\1\64\1\0\1\106\3\0\1\106\2\0\2\64"+
    "\1\67\1\64\5\0\1\64\37\0\1\106\3\0\1\106"+
    "\40\0\3\53\3\13\1\123\4\13\1\55\2\13\1\0"+
    "\1\55\1\0\5\13\1\0\1\53\1\0\1\13\1\55"+
    "\7\13\4\0\1\53\1\57\7\0\1\111\2\0\25\111"+
    "\1\0\27\111\1\112\2\0\25\112\1\0\27\112\1\0"+
    "\3\53\5\13\1\124\2\13\1\55\2\13\1\0\1\55"+
    "\1\0\5\13\1\0\1\53\1\0\1\13\1\55\7\13"+
    "\4\0\1\53\1\57\10\0\3\53\3\13\1\125\4\13"+
    "\1\55\2\13\1\0\1\55\1\0\5\13\1\0\1\53"+
    "\1\0\1\13\1\55\7\13\4\0\1\53\1\57\7\0"+
    "\1\116\2\0\25\116\1\44\14\116\2\111\11\116\1\117"+
    "\2\0\25\117\1\44\14\117\2\112\11\117\1\0\3\53"+
    "\1\13\1\126\6\13\1\55\2\13\1\0\1\55\1\0"+
    "\5\13\1\0\1\53\1\0\1\13\1\55\7\13\4\0"+
    "\1\53\1\57\10\0\3\53\7\13\1\127\1\55\2\13"+
    "\1\0\1\55\1\0\5\13\1\0\1\53\1\0\1\13"+
    "\1\55\7\13\4\0\1\53\1\57\10\0\3\53\6\13"+
    "\1\130\1\13\1\55\2\13\1\0\1\55\1\0\5\13"+
    "\1\0\1\53\1\0\1\13\1\55\7\13\4\0\1\53"+
    "\1\57\10\0\3\53\5\13\1\131\2\13\1\55\2\13"+
    "\1\0\1\55\1\0\5\13\1\0\1\53\1\0\1\13"+
    "\1\55\7\13\4\0\1\53\1\57\10\0\3\53\10\13"+
    "\1\55\2\13\1\0\1\55\1\0\5\13\1\0\1\53"+
    "\1\0\1\13\1\55\1\13\1\132\5\13\4\0\1\53"+
    "\1\57\10\0\3\53\1\133\7\13\1\55\2\13\1\0"+
    "\1\55\1\0\5\13\1\0\1\53\1\0\1\13\1\55"+
    "\7\13\4\0\1\53\1\57\10\0\3\53\2\13\1\134"+
    "\5\13\1\55\2\13\1\0\1\55\1\0\5\13\1\0"+
    "\1\53\1\0\1\13\1\55\7\13\4\0\1\53\1\57"+
    "\10\0\3\53\10\13\1\55\2\13\1\0\1\55\1\0"+
    "\5\13\1\0\1\53\1\0\1\13\1\55\1\13\1\135"+
    "\5\13\4\0\1\53\1\57\10\0\3\53\1\13\1\136"+
    "\6\13\1\55\2\13\1\0\1\55\1\0\5\13\1\0"+
    "\1\53\1\0\1\13\1\55\7\13\4\0\1\53\1\57"+
    "\10\0\3\53\1\13\1\137\6\13\1\55\2\13\1\0"+
    "\1\55\1\0\5\13\1\0\1\53\1\0\1\13\1\55"+
    "\7\13\4\0\1\53\1\57\10\0\3\53\10\13\1\55"+
    "\2\13\1\0\1\55\1\0\5\13\1\0\1\53\1\0"+
    "\1\13\1\55\2\13\1\140\4\13\4\0\1\53\1\57"+
    "\10\0\3\53\3\13\1\141\4\13\1\55\2\13\1\0"+
    "\1\55\1\0\5\13\1\0\1\53\1\0\1\13\1\55"+
    "\7\13\4\0\1\53\1\57\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3408];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\16\1\12\11\1\1\2\11"+
    "\3\1\1\11\3\1\1\0\3\1\1\11\3\1\1\0"+
    "\1\11\3\1\1\0\3\1\1\0\4\1\1\11\5\1"+
    "\1\0\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
    public _PrismaLexer() {
        this((java.io.Reader)null);
    }

    int stringPreviousState = YYINITIAL;
    int curlyCounter = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PrismaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 31: break;
          case 2: 
            { return EOL;
            } 
            // fall through
          case 32: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 33: break;
          case 4: 
            { return ENTITY_NAME;
            } 
            // fall through
          case 34: break;
          case 5: 
            { return NUMBER;
            } 
            // fall through
          case 35: break;
          case 6: 
            { yybegin(BLOCK); curlyCounter = 1; return L_CURLY;
            } 
            // fall through
          case 36: break;
          case 7: 
            { stringPreviousState = yystate(); yybegin(STRING_LITERAL);
            } 
            // fall through
          case 37: break;
          case 8: 
            { return L_PAREN;
            } 
            // fall through
          case 38: break;
          case 9: 
            { return L_BRACKET;
            } 
            // fall through
          case 39: break;
          case 10: 
            { return R_BRACKET;
            } 
            // fall through
          case 40: break;
          case 11: 
            { return R_PAREN;
            } 
            // fall through
          case 41: break;
          case 12: 
            { return COMMA;
            } 
            // fall through
          case 42: break;
          case 13: 
            { return EQ;
            } 
            // fall through
          case 43: break;
          case 14: 
            { return QUESTION_MARK;
            } 
            // fall through
          case 44: break;
          case 15: 
            { return COLON;
            } 
            // fall through
          case 45: break;
          case 16: 
            { curlyCounter++; return L_CURLY;
            } 
            // fall through
          case 46: break;
          case 17: 
            { curlyCounter--; if (curlyCounter == 0) yybegin(YYINITIAL); return R_CURLY;
            } 
            // fall through
          case 47: break;
          case 18: 
            { 
            } 
            // fall through
          case 48: break;
          case 19: 
            { yybegin(stringPreviousState); return STRING;
            } 
            // fall through
          case 49: break;
          case 20: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 4;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return FUNCTION_NAME;
            } 
            // fall through
          case 50: break;
          case 21: 
            { return DOUBLE_COMMENT;
            } 
            // fall through
          case 51: break;
          case 22: 
            { return MODEL_FIELD_ATTRIBUTE_NAME;
            } 
            // fall through
          case 52: break;
          case 23: 
            { return TRIPLE_COMMENT;
            } 
            // fall through
          case 53: break;
          case 24: 
            { return MODEL_BLOCK_ATTRIBUTE_NAME;
            } 
            // fall through
          case 54: break;
          case 25: 
            { return BOOLEAN;
            } 
            // fall through
          case 55: break;
          case 26: 
            { return KEYWORD_TYPE;
            } 
            // fall through
          case 56: break;
          case 27: 
            { return KEYWORD_ENUM;
            } 
            // fall through
          case 57: break;
          case 28: 
            { return KEYWORD_MODEL;
            } 
            // fall through
          case 58: break;
          case 29: 
            { return KEYWORD_GENERATOR;
            } 
            // fall through
          case 59: break;
          case 30: 
            { return KEYWORD_DATASOURCE;
            } 
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
